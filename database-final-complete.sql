-- =====================================================
-- FINAL COMPLETE DATABASE SCHEMA
-- Direct Selling Business Support System
-- Spartan Community India
-- =====================================================

-- Drop existing tables if they exist to ensure a clean setup
DROP TABLE IF EXISTS training_certificates;
DROP TABLE IF EXISTS support_tickets;
DROP TABLE IF EXISTS training_progress;
DROP TABLE IF EXISTS training_modules;
DROP TABLE IF EXISTS team_landing_access;
DROP TABLE IF EXISTS landing_pages;
DROP TABLE IF EXISTS audit_logs;
DROP TABLE IF EXISTS team_messages;
DROP TABLE IF EXISTS goals;
DROP TABLE IF EXISTS lead_category_assignments;
DROP TABLE IF EXISTS lead_categories;
DROP TABLE IF EXISTS lead_activities;
DROP TABLE IF EXISTS leads;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS system_settings;

-- =====================================================
-- 1. USERS TABLE
-- Stores information about admin and team members (direct sellers)
-- =====================================================
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(100),
    phone VARCHAR(20),
    role ENUM('admin', 'team') NOT NULL DEFAULT 'team',
    status ENUM('active', 'inactive', 'suspended') NOT NULL DEFAULT 'active',
    referral_code VARCHAR(20) UNIQUE, -- Unique code for personal referral links
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    last_login DATETIME, -- Added for security
    two_factor_secret VARCHAR(255), -- Added for 2FA
    profile_picture VARCHAR(255), -- Profile picture URL
    address TEXT, -- User address
    date_of_birth DATE, -- Date of birth
    gender ENUM('male', 'female', 'other'), -- Gender
    emergency_contact VARCHAR(20), -- Emergency contact number
    bank_account VARCHAR(50), -- Bank account number
    ifsc_code VARCHAR(20), -- IFSC code
    pan_number VARCHAR(20), -- PAN number
    aadhar_number VARCHAR(20), -- Aadhar number
    joining_date DATE, -- Date of joining
    performance_rating DECIMAL(3,2) DEFAULT 0.00 -- Performance rating (0-5)
);

-- =====================================================
-- 2. LEADS TABLE
-- Stores information about prospects/leads generated by team members or admin
-- =====================================================
CREATE TABLE leads (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    source VARCHAR(50), -- e.g., 'Website', 'Social Media', 'Referral', 'Cold Call', 'landing_student', 'landing_housewife', etc.
    referral_code VARCHAR(20), -- Stores the referral code used to generate this lead
    assigned_to INT, -- ID of the team member this lead is assigned to
    lead_score ENUM('HOT', 'WARM', 'COLD') NOT NULL DEFAULT 'COLD',
    status ENUM('active', 'converted', 'lost', 'follow_up') NOT NULL DEFAULT 'active',
    notes TEXT,
    follow_up_date DATE, -- Added for follow-up reminders
    priority ENUM('low', 'medium', 'high', 'urgent') DEFAULT 'medium', -- Lead priority
    estimated_value DECIMAL(10,2) DEFAULT 0.00, -- Estimated lead value
    last_contact_date DATETIME, -- Last contact date
    next_contact_date DATETIME, -- Next scheduled contact
    lead_source_details TEXT, -- Additional source details
    company_name VARCHAR(100), -- Company name if applicable
    job_title VARCHAR(100), -- Job title if applicable
    industry VARCHAR(100), -- Industry
    location VARCHAR(100), -- Location
    timezone VARCHAR(50), -- Timezone
    preferred_contact_time TIME, -- Preferred contact time
    communication_preference ENUM('phone', 'email', 'whatsapp', 'sms') DEFAULT 'phone', -- Preferred communication method
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (assigned_to) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_assigned_to (assigned_to),
    INDEX idx_status (status),
    INDEX idx_lead_score (lead_score),
    INDEX idx_follow_up_date (follow_up_date),
    INDEX idx_source (source),
    INDEX idx_referral_code (referral_code)
);

-- =====================================================
-- 3. LEAD ACTIVITIES TABLE
-- Tracks interactions and follow-ups with leads
-- =====================================================
CREATE TABLE lead_activities (
    id INT AUTO_INCREMENT PRIMARY KEY,
    lead_id INT NOT NULL,
    user_id INT NOT NULL, -- Team member or admin who performed the activity
    activity_type ENUM('call', 'email', 'meeting', 'note', 'status_change', 'follow_up_set', 'follow_up_completed', 'whatsapp', 'sms', 'other') NOT NULL,
    description TEXT NOT NULL,
    outcome ENUM('positive', 'neutral', 'negative', 'no_response') DEFAULT 'neutral', -- Activity outcome
    duration_minutes INT DEFAULT 0, -- Duration of activity in minutes
    next_action TEXT, -- Next action required
    next_action_date DATETIME, -- When next action should be taken
    attachments TEXT, -- File attachments (JSON array)
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (lead_id) REFERENCES leads(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_lead_id (lead_id),
    INDEX idx_user_id (user_id),
    INDEX idx_activity_type (activity_type),
    INDEX idx_created_at (created_at)
);

-- =====================================================
-- 4. LEAD CATEGORIES TABLE
-- Allows team members/admin to categorize leads
-- =====================================================
CREATE TABLE lead_categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    color VARCHAR(7) DEFAULT '#667eea', -- Hex color for UI representation
    icon VARCHAR(50) DEFAULT 'fas fa-tag', -- FontAwesome icon class
    is_active TINYINT(1) DEFAULT 1,
    sort_order INT DEFAULT 0, -- For ordering categories
    created_by INT, -- Who created this category
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL
);

-- =====================================================
-- 5. LEAD CATEGORY ASSIGNMENTS TABLE
-- Links leads to multiple categories (many-to-many relationship)
-- =====================================================
CREATE TABLE lead_category_assignments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    lead_id INT NOT NULL,
    category_id INT NOT NULL,
    assigned_by INT, -- Who assigned this category
    assigned_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (lead_id, category_id), -- A lead can only be in a category once
    FOREIGN KEY (lead_id) REFERENCES leads(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES lead_categories(id) ON DELETE CASCADE,
    FOREIGN KEY (assigned_by) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_lead_id (lead_id),
    INDEX idx_category_id (category_id)
);

-- =====================================================
-- 6. SYSTEM SETTINGS TABLE
-- For general application settings
-- =====================================================
CREATE TABLE system_settings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    setting_key VARCHAR(100) NOT NULL UNIQUE,
    setting_value TEXT,
    description TEXT,
    setting_type ENUM('string', 'number', 'boolean', 'json', 'email', 'url') DEFAULT 'string',
    is_public TINYINT(1) DEFAULT 0, -- Whether this setting can be viewed by team members
    updated_by INT, -- Who last updated this setting
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- =====================================================
-- 7. GOALS TABLE
-- For setting and tracking goals for users or teams
-- =====================================================
CREATE TABLE goals (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT, -- NULL for team-wide goals
    goal_type VARCHAR(50) NOT NULL, -- e.g., 'leads_generated', 'leads_converted', 'revenue', 'team_size'
    target_value DECIMAL(15,2) NOT NULL, -- Target value (can be leads count, revenue, etc.)
    current_value DECIMAL(15,2) DEFAULT 0.00, -- Current progress
    unit VARCHAR(20) DEFAULT 'count', -- Unit of measurement (count, rupees, percentage, etc.)
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status ENUM('active', 'achieved', 'failed', 'paused') DEFAULT 'active',
    description TEXT, -- Goal description
    milestone_percentage DECIMAL(5,2) DEFAULT 25.00, -- Milestone percentage for notifications
    last_milestone_reached DECIMAL(5,2) DEFAULT 0.00, -- Last milestone percentage reached
    created_by INT, -- Who created this goal
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_goal_type (goal_type),
    INDEX idx_status (status),
    INDEX idx_dates (start_date, end_date)
);

-- =====================================================
-- 8. TEAM MESSAGES TABLE
-- For internal team communication
-- =====================================================
CREATE TABLE team_messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    receiver_id INT, -- NULL for announcements to all team members
    message TEXT NOT NULL,
    message_type ENUM('text', 'image', 'file', 'announcement', 'reminder') DEFAULT 'text',
    is_read BOOLEAN DEFAULT FALSE,
    is_important BOOLEAN DEFAULT FALSE, -- Important messages that require attention
    read_at DATETIME NULL, -- When the message was read
    expires_at DATETIME NULL, -- For temporary messages
    attachments TEXT, -- File attachments (JSON array)
    reply_to INT, -- For threaded conversations
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (receiver_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (reply_to) REFERENCES team_messages(id) ON DELETE SET NULL,
    INDEX idx_sender_id (sender_id),
    INDEX idx_receiver_id (receiver_id),
    INDEX idx_is_read (is_read),
    INDEX idx_created_at (created_at)
);

-- =====================================================
-- 9. AUDIT LOGS TABLE
-- For tracking important system actions for security and compliance
-- =====================================================
CREATE TABLE audit_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT, -- NULL for system actions
    action_type VARCHAR(100) NOT NULL, -- e.g., 'login', 'lead_created', 'user_updated', 'settings_changed'
    description TEXT,
    entity_type VARCHAR(50), -- Type of entity affected (user, lead, goal, etc.)
    entity_id INT, -- ID of the affected entity
    old_values JSON, -- Previous values (for updates)
    new_values JSON, -- New values (for creates/updates)
    ip_address VARCHAR(45), -- IPv4 or IPv6 address
    user_agent TEXT, -- Browser user agent
    session_id VARCHAR(128), -- Session ID
    severity ENUM('low', 'medium', 'high', 'critical') DEFAULT 'medium',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_action_type (action_type),
    INDEX idx_entity_type (entity_type),
    INDEX idx_created_at (created_at),
    INDEX idx_severity (severity)
);

-- =====================================================
-- 10. LANDING PAGES TABLE
-- For managing different landing pages
-- =====================================================
CREATE TABLE landing_pages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    page_name VARCHAR(100) NOT NULL,
    page_slug VARCHAR(100) NOT NULL UNIQUE,
    page_title VARCHAR(200) NOT NULL,
    page_description TEXT,
    target_audience VARCHAR(100) NOT NULL,
    is_active TINYINT(1) DEFAULT 1,
    unlock_requirements TEXT, -- JSON requirements for unlocking this page
    page_content LONGTEXT, -- HTML content for the landing page
    meta_description TEXT, -- SEO meta description
    meta_keywords TEXT, -- SEO meta keywords
    custom_css TEXT, -- Custom CSS for the page
    custom_js TEXT, -- Custom JavaScript for the page
    form_fields JSON, -- Form fields configuration
    success_message TEXT, -- Success message after form submission
    redirect_url VARCHAR(255), -- URL to redirect after form submission
    analytics_code TEXT, -- Analytics tracking code
    created_by INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_page_slug (page_slug),
    INDEX idx_target_audience (target_audience),
    INDEX idx_is_active (is_active)
);

-- =====================================================
-- 11. TEAM LANDING ACCESS TABLE
-- Tracks which team members have access to which landing pages
-- =====================================================
CREATE TABLE team_landing_access (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    landing_page_id INT NOT NULL,
    unlocked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    unlocked_by INT, -- Who granted the access
    unlock_reason VARCHAR(255), -- Reason for unlocking (performance, manual, etc.)
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (landing_page_id) REFERENCES landing_pages(id) ON DELETE CASCADE,
    FOREIGN KEY (unlocked_by) REFERENCES users(id) ON DELETE SET NULL,
    UNIQUE KEY unique_user_landing (user_id, landing_page_id),
    INDEX idx_user_id (user_id),
    INDEX idx_landing_page_id (landing_page_id)
);

-- =====================================================
-- 12. TRAINING MODULES TABLE
-- For training and educational content
-- =====================================================
CREATE TABLE training_modules (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    content LONGTEXT,
    module_type ENUM('video', 'document', 'quiz', 'assignment', 'webinar', 'ebook') NOT NULL,
    difficulty_level ENUM('beginner', 'intermediate', 'advanced') DEFAULT 'beginner',
    duration_minutes INT DEFAULT 0,
    is_active TINYINT(1) DEFAULT 1,
    is_mandatory TINYINT(1) DEFAULT 0, -- Mandatory training modules
    prerequisites TEXT, -- Prerequisites for this module
    learning_objectives TEXT, -- What users will learn
    resources TEXT, -- Additional resources (JSON array)
    video_url VARCHAR(500), -- Video URL if applicable
    document_url VARCHAR(500), -- Document URL if applicable
    quiz_questions JSON, -- Quiz questions and answers
    passing_score INT DEFAULT 70, -- Minimum score to pass (for quizzes)
    max_attempts INT DEFAULT 3, -- Maximum attempts allowed
    certificate_available TINYINT(1) DEFAULT 0, -- Whether certificate is available
    category VARCHAR(100), -- Training category
    tags TEXT, -- Comma-separated tags
    created_by INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_module_type (module_type),
    INDEX idx_difficulty_level (difficulty_level),
    INDEX idx_is_active (is_active),
    INDEX idx_category (category)
);

-- =====================================================
-- 13. TRAINING PROGRESS TABLE
-- Tracks user progress through training modules
-- =====================================================
CREATE TABLE training_progress (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    module_id INT NOT NULL,
    status ENUM('not_started', 'in_progress', 'completed', 'failed') DEFAULT 'not_started',
    progress_percentage INT DEFAULT 0,
    score DECIMAL(5,2) DEFAULT 0.00, -- Score achieved (for quizzes)
    attempts INT DEFAULT 0, -- Number of attempts
    time_spent_minutes INT DEFAULT 0, -- Time spent on module
    completed_at DATETIME NULL,
    notes TEXT,
    feedback TEXT, -- User feedback on the module
    last_accessed_at DATETIME, -- Last time user accessed this module
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (module_id) REFERENCES training_modules(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_module (user_id, module_id),
    INDEX idx_user_id (user_id),
    INDEX idx_module_id (module_id),
    INDEX idx_status (status)
);

-- =====================================================
-- 14. SUPPORT TICKETS TABLE
-- For customer support and help desk functionality
-- =====================================================
CREATE TABLE support_tickets (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    subject VARCHAR(200) NOT NULL,
    description TEXT NOT NULL,
    priority ENUM('low', 'medium', 'high', 'urgent') DEFAULT 'medium',
    status ENUM('open', 'in_progress', 'resolved', 'closed', 'cancelled') DEFAULT 'open',
    category ENUM('technical', 'billing', 'general', 'training', 'other') DEFAULT 'general',
    assigned_to INT NULL,
    resolution TEXT NULL,
    resolution_date DATETIME NULL,
    satisfaction_rating INT, -- 1-5 rating after resolution
    satisfaction_feedback TEXT, -- Feedback after resolution
    attachments TEXT, -- File attachments (JSON array)
    estimated_resolution_date DATETIME, -- When issue is expected to be resolved
    actual_resolution_date DATETIME, -- When issue was actually resolved
    escalation_level INT DEFAULT 0, -- Escalation level (0-3)
    tags TEXT, -- Comma-separated tags for categorization
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (assigned_to) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_status (status),
    INDEX idx_priority (priority),
    INDEX idx_assigned_to (assigned_to),
    INDEX idx_created_at (created_at)
);

-- =====================================================
-- 15. TRAINING CERTIFICATES TABLE
-- For storing training certificates
-- =====================================================
CREATE TABLE training_certificates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    module_id INT NOT NULL,
    certificate_number VARCHAR(50) UNIQUE,
    certificate_url VARCHAR(500), -- URL to the certificate file
    issued_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    issued_by INT, -- Who issued the certificate
    valid_until DATE, -- Certificate validity period
    verification_code VARCHAR(20), -- For certificate verification
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (module_id) REFERENCES training_modules(id) ON DELETE CASCADE,
    FOREIGN KEY (issued_by) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_module_id (module_id),
    INDEX idx_certificate_number (certificate_number)
);

-- =====================================================
-- INITIAL DATA INSERTION
-- =====================================================

-- Insert default admin user
INSERT INTO users (username, email, password_hash, full_name, role, status, referral_code, joining_date) VALUES
('admin', 'admin@spartancommunity.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'Admin User', 'admin', 'active', 'ADMIN001', CURDATE());

-- Insert sample team member
INSERT INTO users (username, email, password_hash, full_name, role, status, referral_code, joining_date) VALUES
('team001', 'team@spartancommunity.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'Sample Team Member', 'team', 'active', 'REF000001', CURDATE());

-- Insert default lead categories
INSERT INTO lead_categories (category_name, description, color, icon, created_by) VALUES
('Hot Leads', 'High priority leads with immediate potential', '#ff6b6b', 'fas fa-fire', 1),
('Warm Leads', 'Medium priority leads with good potential', '#feca57', 'fas fa-sun', 1),
('Cold Leads', 'Low priority leads requiring nurturing', '#54a0ff', 'fas fa-snowflake', 1),
('Students', 'Leads from student demographic', '#00d2d3', 'fas fa-graduation-cap', 1),
('Housewives', 'Leads from housewife demographic', '#ff9ff3', 'fas fa-home', 1),
('Retirees', 'Leads from retiree demographic', '#ee5a24', 'fas fa-user-friends', 1),
('Job Seekers', 'Leads from job seeker demographic', '#5f27cd', 'fas fa-briefcase', 1),
('Side Business', 'Leads interested in side business', '#00d2d3', 'fas fa-chart-line', 1);

-- Insert default landing pages
INSERT INTO landing_pages (page_name, page_slug, page_title, page_description, target_audience, unlock_requirements, page_content, created_by) VALUES
('Student Success', 'student-success', 'Student Success Program - Build Your Future While Studying', 'Perfect landing page for students looking for part-time opportunities', 'Students', '{"leads_required": 50, "active_members_required": 5}', '<h1>Student Success Program</h1><p>Build your future while studying...</p>', 1),
('Housewife Empowerment', 'housewife-empowerment', 'Housewife Empowerment - Earn from Home', 'Designed for housewives seeking home-based opportunities', 'Housewives', '{"leads_required": 50, "active_members_required": 5}', '<h1>Housewife Empowerment</h1><p>Earn from home...</p>', 1),
('Retiree Success', 'retiree-success', 'Retiree Success Program - Stay Active, Stay Earning', 'Perfect for retirees wanting to stay active and earn', 'Retirees', '{"leads_required": 50, "active_members_required": 5}', '<h1>Retiree Success Program</h1><p>Stay active and earn...</p>', 1),
('Job Seeker Opportunity', 'job-seeker-opportunity', 'Job Seeker Opportunity - Turn Your Job Search into Success', 'For unemployed people looking for opportunities', 'Job Seekers', '{"leads_required": 50, "active_members_required": 5}', '<h1>Job Seeker Opportunity</h1><p>Turn your job search into success...</p>', 1),
('Side Business Opportunity', 'side-business-opportunity', 'Side Business Opportunity - Build Your Empire', 'For people wanting side business opportunities', 'Side Business', '{"leads_required": 50, "active_members_required": 5}', '<h1>Side Business Opportunity</h1><p>Build your empire...</p>', 1);

-- Insert default system settings
INSERT INTO system_settings (setting_key, setting_value, description, setting_type, is_public) VALUES
('company_name', 'Spartan Community India', 'Company name', 'string', 1),
('company_email', 'info@spartancommunity.com', 'Company email address', 'email', 1),
('company_phone', '+91-9876543210', 'Company phone number', 'string', 1),
('whatsapp_number', '919876543210', 'WhatsApp number for lead communication', 'string', 0),
('lead_follow_up_days', '7', 'Default follow-up days for leads', 'number', 0),
('max_leads_per_user', '1000', 'Maximum leads a user can handle', 'number', 0),
('system_timezone', 'Asia/Kolkata', 'System timezone', 'string', 0),
('enable_notifications', 'true', 'Enable system notifications', 'boolean', 0),
('enable_2fa', 'false', 'Enable two-factor authentication', 'boolean', 0),
('session_timeout', '3600', 'Session timeout in seconds', 'number', 0);

-- Insert sample training modules
INSERT INTO training_modules (title, description, content, module_type, difficulty_level, duration_minutes, is_active, created_by) VALUES
('Introduction to Direct Selling', 'Basic introduction to direct selling concepts and principles', 'This module covers the fundamentals of direct selling...', 'document', 'beginner', 30, 1, 1),
('Lead Generation Techniques', 'Learn effective techniques for generating quality leads', 'This module teaches various lead generation methods...', 'video', 'intermediate', 45, 1, 1),
('Communication Skills', 'Essential communication skills for direct selling', 'Learn how to communicate effectively with prospects...', 'video', 'beginner', 60, 1, 1),
('Sales Psychology', 'Understanding customer psychology for better sales', 'Deep dive into customer behavior and psychology...', 'document', 'advanced', 90, 1, 1),
('Team Building Strategies', 'How to build and manage a successful team', 'Learn strategies for building and managing teams...', 'video', 'intermediate', 75, 1, 1);

-- Insert sample goals
INSERT INTO goals (user_id, goal_type, target_value, current_value, unit, start_date, end_date, status, description, created_by) VALUES
(2, 'leads_generated', 100, 0, 'count', CURDATE(), DATE_ADD(CURDATE(), INTERVAL 30 DAY), 'active', 'Generate 100 leads this month', 1),
(2, 'leads_converted', 10, 0, 'count', CURDATE(), DATE_ADD(CURDATE(), INTERVAL 30 DAY), 'active', 'Convert 10 leads this month', 1),
(NULL, 'team_leads_generated', 1000, 0, 'count', CURDATE(), DATE_ADD(CURDATE(), INTERVAL 30 DAY), 'active', 'Team goal: Generate 1000 leads this month', 1);

-- =====================================================
-- CREATE INDEXES FOR BETTER PERFORMANCE
-- =====================================================

-- Additional indexes for better query performance
CREATE INDEX idx_leads_email ON leads(email);
CREATE INDEX idx_leads_phone ON leads(phone);
CREATE INDEX idx_leads_created_at ON leads(created_at);
CREATE INDEX idx_leads_updated_at ON leads(updated_at);

CREATE INDEX idx_lead_activities_created_at ON lead_activities(created_at);
CREATE INDEX idx_lead_activities_activity_type ON lead_activities(activity_type);

CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_status ON users(status);
CREATE INDEX idx_users_referral_code ON users(referral_code);

CREATE INDEX idx_goals_goal_type ON goals(goal_type);
CREATE INDEX idx_goals_start_date ON goals(start_date);
CREATE INDEX idx_goals_end_date ON goals(end_date);

CREATE INDEX idx_team_messages_sender_id ON team_messages(sender_id);
CREATE INDEX idx_team_messages_receiver_id ON team_messages(receiver_id);
CREATE INDEX idx_team_messages_is_read ON team_messages(is_read);

CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id);
CREATE INDEX idx_audit_logs_action_type ON audit_logs(action_type);
CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at);

CREATE INDEX idx_support_tickets_user_id ON support_tickets(user_id);
CREATE INDEX idx_support_tickets_status ON support_tickets(status);
CREATE INDEX idx_support_tickets_priority ON support_tickets(priority);

CREATE INDEX idx_training_modules_module_type ON training_modules(module_type);
CREATE INDEX idx_training_modules_difficulty_level ON training_modules(difficulty_level);

CREATE INDEX idx_training_progress_user_id ON training_progress(user_id);
CREATE INDEX idx_training_progress_module_id ON training_progress(module_id);
CREATE INDEX idx_training_progress_status ON training_progress(status);

-- =====================================================
-- CREATE VIEWS FOR COMMON QUERIES
-- =====================================================

-- View for lead statistics
CREATE VIEW v_lead_statistics AS
SELECT 
    l.assigned_to,
    u.full_name as assigned_to_name,
    COUNT(*) as total_leads,
    COUNT(CASE WHEN l.status = 'active' THEN 1 END) as active_leads,
    COUNT(CASE WHEN l.status = 'converted' THEN 1 END) as converted_leads,
    COUNT(CASE WHEN l.status = 'lost' THEN 1 END) as lost_leads,
    COUNT(CASE WHEN l.lead_score = 'HOT' THEN 1 END) as hot_leads,
    COUNT(CASE WHEN l.lead_score = 'WARM' THEN 1 END) as warm_leads,
    COUNT(CASE WHEN l.lead_score = 'COLD' THEN 1 END) as cold_leads,
    AVG(CASE WHEN l.status = 'converted' THEN 1 ELSE 0 END) * 100 as conversion_rate
FROM leads l
LEFT JOIN users u ON l.assigned_to = u.id
GROUP BY l.assigned_to, u.full_name;

-- View for team performance
CREATE VIEW v_team_performance AS
SELECT 
    u.id,
    u.full_name,
    u.username,
    u.referral_code,
    u.joining_date,
    COUNT(l.id) as total_leads,
    COUNT(CASE WHEN l.status = 'converted' THEN 1 END) as converted_leads,
    COUNT(CASE WHEN l.created_at >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as leads_last_30_days,
    COUNT(tm.id) as total_messages,
    COUNT(CASE WHEN tm.is_read = 1 THEN 1 END) as read_messages,
    u.last_login
FROM users u
LEFT JOIN leads l ON u.id = l.assigned_to
LEFT JOIN team_messages tm ON u.id = tm.receiver_id
WHERE u.role = 'team' AND u.status = 'active'
GROUP BY u.id, u.full_name, u.username, u.referral_code, u.joining_date, u.last_login;

-- View for training progress
CREATE VIEW v_training_progress AS
SELECT 
    u.id as user_id,
    u.full_name,
    tm.id as module_id,
    tm.title as module_title,
    tm.module_type,
    tm.difficulty_level,
    tp.status,
    tp.progress_percentage,
    tp.score,
    tp.attempts,
    tp.time_spent_minutes,
    tp.completed_at,
    tm.duration_minutes
FROM users u
CROSS JOIN training_modules tm
LEFT JOIN training_progress tp ON u.id = tp.user_id AND tm.id = tp.module_id
WHERE u.role = 'team' AND u.status = 'active' AND tm.is_active = 1;

-- =====================================================
-- STORED PROCEDURES FOR COMMON OPERATIONS
-- =====================================================

DELIMITER //

-- Procedure to get user dashboard data
CREATE PROCEDURE GetUserDashboard(IN user_id INT)
BEGIN
    SELECT 
        (SELECT COUNT(*) FROM leads WHERE assigned_to = user_id) as total_leads,
        (SELECT COUNT(*) FROM leads WHERE assigned_to = user_id AND status = 'active') as active_leads,
        (SELECT COUNT(*) FROM leads WHERE assigned_to = user_id AND status = 'converted') as converted_leads,
        (SELECT COUNT(*) FROM leads WHERE assigned_to = user_id AND follow_up_date = CURDATE()) as follow_up_today,
        (SELECT COUNT(*) FROM team_messages WHERE receiver_id = user_id AND is_read = 0) as unread_messages,
        (SELECT COUNT(*) FROM support_tickets WHERE user_id = user_id AND status IN ('open', 'in_progress')) as open_tickets;
END //

-- Procedure to update lead status
CREATE PROCEDURE UpdateLeadStatus(IN lead_id INT, IN new_status VARCHAR(20), IN user_id INT)
BEGIN
    UPDATE leads 
    SET status = new_status, updated_at = CURRENT_TIMESTAMP 
    WHERE id = lead_id;
    
    INSERT INTO lead_activities (lead_id, user_id, activity_type, description)
    VALUES (lead_id, user_id, 'status_change', CONCAT('Status changed to: ', new_status));
END //

-- Procedure to get team statistics
CREATE PROCEDURE GetTeamStatistics()
BEGIN
    SELECT 
        (SELECT COUNT(*) FROM users WHERE role = 'team' AND status = 'active') as total_team_members,
        (SELECT COUNT(*) FROM leads) as total_leads,
        (SELECT COUNT(*) FROM leads WHERE status = 'converted') as converted_leads,
        (SELECT COUNT(*) FROM leads WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)) as leads_last_30_days,
        (SELECT COUNT(*) FROM support_tickets WHERE status = 'open') as open_tickets,
        (SELECT COUNT(*) FROM training_modules WHERE is_active = 1) as active_training_modules;
END //

DELIMITER ;

-- =====================================================
-- TRIGGERS FOR AUTOMATIC OPERATIONS
-- =====================================================

-- Trigger to update lead updated_at timestamp
DELIMITER //
CREATE TRIGGER tr_leads_updated_at
    BEFORE UPDATE ON leads
    FOR EACH ROW
BEGIN
    SET NEW.updated_at = CURRENT_TIMESTAMP;
END //

-- Trigger to update user updated_at timestamp
CREATE TRIGGER tr_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
BEGIN
    SET NEW.updated_at = CURRENT_TIMESTAMP;
END //

-- Trigger to create audit log for lead updates
CREATE TRIGGER tr_leads_audit
    AFTER UPDATE ON leads
    FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (user_id, action_type, description, entity_type, entity_id, old_values, new_values)
    VALUES (
        NEW.assigned_to,
        'lead_updated',
        CONCAT('Lead updated: ', NEW.name),
        'lead',
        NEW.id,
        JSON_OBJECT('status', OLD.status, 'lead_score', OLD.lead_score, 'notes', OLD.notes),
        JSON_OBJECT('status', NEW.status, 'lead_score', NEW.lead_score, 'notes', NEW.notes)
    );
END //

DELIMITER ;

-- =====================================================
-- FINAL NOTES
-- =====================================================

-- This database schema includes:
-- 1. Complete user management system
-- 2. Lead management with categories and activities
-- 3. Goal tracking and team performance
-- 4. Team communication system
-- 5. Training and support system
-- 6. Landing page management
-- 7. Audit logging for security
-- 8. System settings management
-- 9. Performance indexes and views
-- 10. Stored procedures for common operations
-- 11. Triggers for automatic operations

-- Default credentials:
-- Admin: admin@spartancommunity.com / password
-- Team: team@spartancommunity.com / password

-- To use this database:
-- 1. Import this SQL file into your MySQL database
-- 2. Update database connection settings in your PHP files
-- 3. Change default passwords after first login
-- 4. Configure system settings as needed

-- Database is optimized for:
-- - High performance with proper indexing
-- - Data integrity with foreign key constraints
-- - Security with audit logging
-- - Scalability with proper normalization
-- - Flexibility with JSON fields for extensibility
